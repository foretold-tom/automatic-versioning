<?xml version="1.0" encoding="utf-8"?>

<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!-- Identify the version file and add it to the Compile item group. -->
	<ItemGroup>
		<VersionFile Include="$(IntermediateOutputPath)Version.cs">
			<Visible>false</Visible>
		</VersionFile>

		<Compile Include="@(VersionFile)" />
	</ItemGroup>


	<PropertyGroup>
		<!-- Include the version file for the Clean target. -->
		<CleanDependsOn>CleanVersionFile;$(CleanDependsOn)</CleanDependsOn>

		<!-- Ensure the target is run as part of each Build. -->
		<BuildDependsOn>GenerateVersionFile;$(BuildDependsOn)</BuildDependsOn>

		<!--
			By the time the Directory.Build.targets file is imported, the Version property
			will already be set, either by the command line argument, the default value
			within Directory.Build.props, or the default value of "1.0.0.0" assigned
			by MSBuild when Version is empty.
		-->
		<AssemblyVersion     Condition=" '' == '$(AssemblyVersion)' "    >$(Version)</AssemblyVersion>
		<AssemblyFileVersion Condition=" '' == '$(AssemblyFileVersion)' ">$(Version)</AssemblyFileVersion>
	</PropertyGroup>


	<Target Name="CleanVersionFile">
		<Delete Files="@(VersionFile)" />
	</Target>


	<Target Name="GenerateVersionFile"
			Condition=" '' != '@(VersionFile)' ">

		<!-- These assembly attributes will be written to the version file. -->
		<ItemGroup>
			<AssemblyAttributes Include="AssemblyVersion"     Condition=" '' != '$(AssemblyVersion)' ">
				<_Parameter1>$(AssemblyVersion)</_Parameter1>
			</AssemblyAttributes>
			<AssemblyAttributes Include="AssemblyFileVersion" Condition=" '' != '$(AssemblyFileVersion)' ">
				<_Parameter1>$(AssemblyFileVersion)</_Parameter1>
			</AssemblyAttributes>
		</ItemGroup>

		<!--
			To enable incremental builds, we do not want to re-generate the code file for every build.
			If we did that, then every build would end up being treated as a rebuild, and would also
			result in all downstream project references to have to rebuild as well. On larger projects,
			this can slow down a build significantly.

			Instead we'll generate a temporary code file. Then we compare the temp file to the one that
			was generated previously, if it exists. If there is any change, or the previously generated
			file does not yet exist, then move/rename the temp file to become the new version file.
		-->
		<ItemGroup>
			<TemporaryVersionFile Include="$([System.IO.Path]::GetTempFileName())" />
		</ItemGroup>

		<!-- Generate the temporary version file -->
		<WriteCodeFragment Language="C#"
						   AssemblyAttributes="@(AssemblyAttributes)"
						   OutputFile="@(TemporaryVersionFile)" />

		<!-- Compare the newly-generated temporary version file to the previously-generated version file, if it exists. -->
		<Exec Command='"fc.exe" /U "@(TemporaryVersionFile)" "@(VersionFile)"'
			  Condition=" Exists('@(TemporaryVersionFile)') AND Exists('@(VersionFile)') "
			  IgnoreExitCode="true">
			<!-- The process return code will be zero (0) if the files are identical. -->
			<Output TaskParameter="ExitCode" PropertyName="FcReturnCode"/>
		</Exec>
		
		<!-- Conditionally move/rename the temporary file. -->
		<Move SourceFiles="@(TemporaryVersionFile)" DestinationFiles="@(VersionFile)" Condition=" !Exists('@(VersionFile)') OR '$(FcReturnCode)' != '0' " />

		<!-- Delete the temporary file if it still exists. -->
		<Delete Files="@(TemporaryVersionFile)" Condition=" Exists('@(TemporaryVersionFile)') " />
	</Target>

</Project>
